{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33400\viewh21000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 library(gtools)\
library(tidyverse)\
library(ggplot2)\
library(tidybiology)\
\
\ul Task 4\ulnone \
\
1) sqrt(10)\
2) log2(32)\
3) sum(1:1000)\
4) sum(c(1:1000)[even(1:1000)])\
5) nrow(combinations(100,2))\
6) nrow(combinations(100,3))\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Task 5\ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
data(CO2)\
help(CO2)\
\
2) The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance of the grass species Echinochloa crus-galli.\
The columns describe the origin of the plants, whether the sample was treated or not, the CO2 conc and uptake.\
\
3) CO2_Q <- CO2[CO2$Type == 'Quebec',]\
mean(CO2_Q$uptake)\
median(CO2_Q$uptake)\
\
CO2_M <- CO2[CO2$Type == 'Mississippi',]\
mean(CO2_M$uptake)\
median(CO2_M$uptake)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Task 6\
\
1) \ulnone mean_median_ratio <- function(x)  (mean(x) / median(x))\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
2) mean_wo_highlow <- function(x) \{\
  sorted_x <- sort(x)\
  mean(tail(head(sorted_x, -1), -1))\
\}\
\
3)The benefits of piping is to make sequential functional operations more readable.\
It enables you to avoid the use of extensive loops and rather list the functions in order of operation.\
Two examples of where piping should not be used it when there are too many functions being ran or when\
the inputs/outputs are multiple values.\
\
4) The purpose of the apply family is to avoid the need to create loops in R. The different members \
provide multiple options depending on the input data, i.e. what you are "iterating" over\
Thus, they could be useful for applying functions over rows or columns individually.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Task 7\ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
magic_guys <- read.csv(file = 'Documents/Shared material - Course 5633 - Year 2023/Course week 1/magic_guys.csv')\
magic_guys_j <- magic_guys %>% filter(species == 'jedi')\
magic_guys_s <- magic_guys %>% filter(species == 'sith')\
\
1a) hist(magic_guys_j$length,)\
hist(magic_guys_s$length)\
\
ggplot(data = magic_guys, aes(x=length, col=species)) + geom_histogram()\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 1b) boxplot(magic_guys_j$length, magic_guys_s$length, names=c('jedi','sith')) \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 ggplot(data = magic_guys, aes(x=length, col=species)) + geom_boxplot()\
\
1c) .png is a rasterized image that takes less space and generally useful for basic visualizations\
.pdf and .svg provide a vectorized format that can thus be adjusted and optimized in Adobe Illustrator etc.\
\
2a) microarray_data <- read.csv(file = 'Documents/Shared material - Course 5633 - Year 2023/Course week 1/microarray_data.tab',\
                            sep = "")\
nrow(microarray_data) #551\
ncol(microarray_data) #1000\
\
2b) n_missing <-  colSums(is.na(microarray_data)) ## number of missing values per gene\
hist(n_missing)\
\
2c) genes_x10 <- colnames(microarray_data[colSums(is.na(microarray_data)) > nrow(microarray_data)*.1])\
genes_x20 <- colnames(microarray_data[colSums(is.na(microarray_data)) > nrow(microarray_data)*.2])\
genes_x50 <- colnames(microarray_data[colSums(is.na(microarray_data)) > nrow(microarray_data)*.5])\
\
d) ### x is the column vector, i.e. we take column, filter out the NAs and replace them with the means\
impute_func <- function(x) \{ \
  x[is.na(x)] = mean(x, na.rm = T)\
  return (x)\
  \}\
\
imputed_microarray_data <- apply(X = microarray_data, MARGIN = 2,\
      FUN = impute_func)\
imputed_microarray_data <- as.data.frame(imputed_microarray_data)\
\
\
3) ggplot(data = CO2, aes(x=uptake, col=Type)) + geom_boxplot()\
ggplot(data = CO2, aes(x=uptake, y=conc, col=Type)) + geom_point()\
\
The plots indicate that the type, i.e. whether the plants are from M or Q are predictive of uptake, regardless of treatments. \
\
\
\
\ul Task 8\
\ulnone \
data(chromosome)\
\
1a) chromosome %>%\
  summarise_at(c("variations", "protein_codinggenes", "mi_rna"), .funs = list("mean" = mean, \
                                                                              "median" = median, \
                                                                              "maximum" = max))\
\
1b) ggplot(data = chromosome, aes(x=id, y=basepairs)) + geom_point() ##n basepairs. They are generally decreasing in size.\
\
1c) ggplot(data = chromosome, aes(x=protein_codinggenes, y=basepairs)) + geom_point() ### protein coding\
ggplot(data = chromosome, aes(x=mi_rna, y=basepairs)) + geom_point() ### mirna\
\
Both variables correlate with number of basepairs.\
\
1d) data(proteins)\
summary_p <- proteins %>%\
  summarise_at(c("length", "mass"), .funs = list("mean" = mean, \
                                                 "median" = median, \
                                                 "maximum" = max))\
\
ggplot(data = proteins, aes(x=length, y=mass)) + geom_point() ### They are highly linearly correlating.\
}